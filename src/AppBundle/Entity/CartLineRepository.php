<?php

namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Validator\Constraints\DateTime;

/**
 * CartLineRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CartLineRepository extends EntityRepository
{


    public function findLinesPerProductCategory(Cart $cart,ProductCategory $productCategory){

      // Récupére les lignes qui appartiennent au panier passé en parametre et dans lesquelles, les produits sont actifs et appartiennent à la catégory de produit passé en parametre
        $query = $this->createQueryBuilder('l')
            ->select('l')
            ->innerJoin('l.product','p2')
            ->innerJoin('l.cart','ca')
            ->where('ca.id = :cartId')
            ->andWhere('p2.id IN ( SELECT p.id FROM AppBundle:Product p JOIN p.categories pc WHERE pc = :category AND p.active = true )')
            ->setParameters(array('cartId'=> $cart->getId(),'category'=>$productCategory))
            ->getQuery()
            ->getResult();

        return $query;


    }


    public function findLinesPerProductCategoryAndUser(ProductCategory $productCategory,User $user,\DateTime $initDate){
/*
 SELECT *
FROM cart_line l, user u,cart c, product p, product_category pc,product_product_category relp
WHERE (l.cart_id = c.id)
AND (c.user_id = u.id)
AND (l.product_id = p.id)
AND (p.id = relp.product_id)
AND (pc.id = relp.product_category_id)
AND u.id=1
AND pc.name='createndd'

RQT sql voulu

SELECT *
FROM cart_line l
INNER JOIN cart c ON l.cart_id = c.id
INNER JOIN product p ON l.product_id = p.id
INNER JOIN user u ON c.user_id = u.id
INNER JOIN product_category pc
INNER JOIN product_product_category relp ON (p.id = relp.product_id AND pc.id = relp.product_category_id)
WHERE u.id=1
AND pc.name='createndd'

 */

        // Récupére les lignes qui appartiennent au panier passé en parametre et dans lesquelles, les produits sont actifs et appartiennent à la catégory de produit passé en parametre


        $query = $this->createQueryBuilder('l')
            ->select('l')
            ->innerJoin('l.cart','c')
            ->innerJoin('l.product','p2')
            ->innerJoin('c.user','u')
            ->where('u.id = :userId')
            ->andWhere('p2.id IN ( SELECT p.id FROM AppBundle:Product p JOIN p.categories pc WHERE pc = :category AND p.active = true )')
           // ->andWhere('l.whenUpdate > '.$lastYear.'-01-01')
            ->andWhere('l.whenUpdate > :date')
            ->andWhere('c.isPaid = :isPaid')
            ->setParameters(array('userId'=> $user->getId(),'category'=>$productCategory,'date'=> $initDate,'isPaid'=>true))
            ->getQuery()
            ->getResult();

        return $query;


    }


    public function findLinesPerProductCategoryAndOptionValidIsTrue(Cart $cart,ProductCategory $productCategory){

        // Récupére les lignes qui appartiennent au panier passé en parametre et dans lesquelles, les produits sont actifs et appartiennent à la catégory de produit passé en parametre
        $query = $this->createQueryBuilder('l')
            ->select('l')
            ->innerJoin('l.product','p2')
            ->innerJoin('l.cart','ca')
            ->where('ca.id = :cartId')
            ->andWhere('p2.id IN ( SELECT p.id FROM AppBundle:Product p JOIN p.categories pc WHERE pc = :category AND p.active = true )')
            ->andWhere('l.options NOT LIKE :partOfOptions')
            ->setParameters(array('cartId'=> $cart->getId(),'category'=>$productCategory,'partOfOptions'=>'%"valid":true%'))
            ->getQuery()
            ->getResult();

        return $query;


    }




}
