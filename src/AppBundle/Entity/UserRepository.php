<?php

namespace AppBundle\Entity;

use AppBundle\Entity\Agency;
use Doctrine\ORM\EntityRepository;
use AppBundle\Entity\User;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{

    public function checkLogIn(User $user,$password){

        $passwordToCheck = $this->encodePassword($user,$password);
        return $user->getPassword() == $passwordToCheck ?true:false;

    }

    public function encodePassword(User $user,$password){
        return sha1($user->getRegistrationDate()->getTimestamp().$password.$user->getRegistrationDate()->getTimestamp() );
    }

    public function findUsersAgencies(){
        return $this->createQueryBuilder('u')
            ->where('u.parent is NULL ')
            ->getQuery()->getResult();
    }


    public  function findAllWithoutRoleCompteEmail(){
        return $this->createQueryBuilder('u')
            ->join('u.roles' ,'r','WITH','r.name != \'ROLE_COMPTE_EMAIL\' ')

            ->getQuery()->getResult();
    }

    public  function findClientsAgenciesAndOtherGestionnary(Agency $agency){
        return $this->createQueryBuilder('u')
            ->join('u.roles' ,'r','WITH','r.name != \'ROLE_COMPTE_EMAIL\' ')
            ->where('u.agency = :agency')
            ->orWhere('u.agency != :agency AND u.parent is null' )
            ->setParameter('agency',$agency)
            ->getQuery()->getResult();
    }
    public function findClientsAgencies(Agency $agency){
        return $this->createQueryBuilder('u')
            ->join('u.roles' ,'r','WITH','r.name != \'ROLE_COMPTE_EMAIL\' ')
            ->where('u.agency = :agency')
            ->setParameter('agency',$agency)
            ->getQuery()->getResult();
    }

    public function findParentByAgency(Agency $agency){
        $request = $this->createQueryBuilder('u')
            ->where('u.parent IS NULL ')
            ->andWhere('u.agency = :agency')
            ->setParameter('agency', $agency)
            ->getQuery();
        $request = $request->getSingleResult();

        return $request;
    }

    public function userExist($email,Roles $roles){
        //$tasks = $this->createQueryBuilder('t')->join('t.users', 'u', 'WITH', 'u.id = :id');

        $res =   $this->createQueryBuilder('u')
            ->join('u.roles' ,'r','WITH','r.id = :roles')
            ->where('u.email = :email ')
            ->setParameter('roles',$roles->getId())
            ->setParameter('email',$email)
            ->getQuery()->getArrayResult();

        return !empty($res)?true:false;
    }

    public function userDontExist($email,Roles $roles){
        //$tasks = $this->createQueryBuilder('t')->join('t.users', 'u', 'WITH', 'u.id = :id');
        $query = $this->createQueryBuilder('u')
            ->join('u.roles' ,'r','WITH','r.id != :roles')
            ->where('u.email = :email ')
            ->setParameter('roles',$roles->getId())
            ->setParameter('email',$email)->getQuery();

        // echo $query->getSQL();
        $res =  $query->getArrayResult();

        return empty($res)?true:false;
    }


}
